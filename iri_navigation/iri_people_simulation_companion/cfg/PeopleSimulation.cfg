#! /usr/bin/env python
#*  All rights reserved.
#*
#*  Redistribution and use in source and binary forms, with or without
#*  modification, are permitted provided that the following conditions
#*  are met:
#*
#*   * Redistributions of source code must retain the above copyright
#*     notice, this list of conditions and the following disclaimer.
#*   * Redistributions in binary form must reproduce the above
#*     copyright notice, this list of conditions and the following
#*     disclaimer in the documentation and/or other materials provided
#*     with the distribution.
#*   * Neither the name of the Willow Garage nor the names of its
#*     contributors may be used to endorse or promote products derived
#*     from this software without specific prior written permission.
#*
#*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#*  POSSIBILITY OF SUCH DAMAGE.
#***********************************************************

# Author: 

PACKAGE='iri_people_simulation_companion'

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

#       Name                       Type       Reconfiguration level            Description                       Default   Min   Max
#gen.add("velocity_scale_factor",  double_t,  0,                               "Maximum velocity scale factor",  0.5,      0.0,  1.0)
gen.add("robot",   str_t,   0,    "robot name",   "unknown")
gen.add("simulation_mode",       int_t,      0,                        "Person simulation mode: 0 for normal mode: constant number of persons; 1 for people density growing",    0,  0,  1)
gen.add("vis_mode",              bool_t,      0,                           "Visualization markers are enabled or not",   False)
gen.add("freeze",              bool_t,      0,                  "Freezes persons to publish the same scene over time",   False)
gen.add("remove_targets",       bool_t,      0,                           "The simulation removes tagets once they get to their first destination",   False)
gen.add("number_persons",       int_t,       0,                            "number of targets",                 0,      0,    5000)
gen.add("force_map_path",   str_t,   0,    "path to force map file",   "")
gen.add("destination_map_path",   str_t,   0,    "path to force map file",   "")
gen.add("id_person_companion", double_t,   0,   "Id of the person which is accompanied by the robot", 1.0,      1.0,  1000.0)
gen.add("proximity_distance_between_robot_and_person", double_t,   0,   "Is the distance between robot and person", 1.5,      0.0,  5.0)
gen.add("proximity_distance_tolerance", double_t,   0,   "Is the tolerance of distance between robot and person, far(+) and near(-)", 0.25,      0.0,  4.0)
gen.add("person_companion_goal_force_marker"       ,   bool_t,  0, "enable visualization of robot goal force marker", True)
gen.add("person_companion_person_forces_marker"   ,     bool_t,  0, "enable visualization of robot person forces marker", True)
gen.add("person_companion_obstacles_forces_marker",     bool_t,  0, "enable visualization of robot obstacles forces marker", True)
gen.add("person_companion_resultant_force_marker" ,     bool_t,  0, "enable visualization of robot resultan force marker", True)
gen.add("persopn_companion_companion_force_marker" ,     bool_t,  0, "enable visualization of robot resultan force marker", True)
gen.add("person_companion_goal_providing_mode",           int_t,   0,   "mode to provide goals to the local planner: #0 cropping or intersecting the plan with the boundary of local window; #1 Slicing the plan into a set of subgoals at salient points", 0,      0,  1)
gen.add("person_companion_slicing_diff_orientation",   double_t,   0,   "Slicing path changes in orientation to select a new subgoal. Only makes sense if the goal_providing_mode is set to #1", 20.0,      10.0,  90.0)
gen.add("vis_mode2",         int_t,    0,   "Visualization markers: #0 no markers, #1 min, #2 normal(2d), #3 super (3d)",          2,      0,  3)
gen.add("ini_theta_companion_person", double_t,   0,   "initial person companion orientation in simulation", -1.57,      -6.28,  6.28)
exit(gen.generate(PACKAGE, "PeopleSimulationAlgorithm", "PeopleSimulation"))
