#! /usr/bin/env python
#*  All rights reserved.
#*
#*  Redistribution and use in source and binary forms, with or without
#*  modification, are permitted provided that the following conditions
#*  are met:
#*
#*   * Redistributions of source code must retain the above copyright
#*     notice, this list of conditions and the following disclaimer.
#*   * Redistributions in binary form must reproduce the above
#*     copyright notice, this list of conditions and the following
#*     disclaimer in the documentation and/or other materials provided
#*     with the distribution.
#*   * Neither the name of the Willow Garage nor the names of its
#*     contributors may be used to endorse or promote products derived
#*     from this software without specific prior written permission.
#*
#*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#*  POSSIBILITY OF SUCH DAMAGE.
#***********************************************************

# Author: 

PACKAGE='iri_simulated_person_companion_akp_local_planner'

from dynamic_reconfigure.parameter_generator_catkin import *
gen = ParameterGenerator()
gen.add("conf_bool_group_go_to_interact_with_other_person",      bool_t,    0,   " If Fasle the group go to fix goal if true group go to meet other person",   False)
gen.add("conf_real_distance_between_people_of_group", double_t,0,   "Companion angle respect other people in group",              1.5,      0.0,  5.0)
gen.add("companion_angle_respect_people_in_group", double_t,0,   "Companion angle respect other people in group",              90,      0.0,  360.0)
gen.add("max_vel_comp_pers", double_t,0,   "Maximum velocity of the person companion",              0.5,      0.0,  100.0)
gen.add("robot_sim_comp_pers_name"                             , str_t,    0,  "Robot name for the simulated companion person as a robot with the AKP planner"     ,  "robotSimName")
gen.add("other_person_of_group_comp_sim_name"                             , str_t,    0,  "Robot name for the simulated companion person as a robot with the AKP planner"     ,  "OtherPersonOfGroupSimName")
gen.add("id_person_other_person_of_group_companion", int_t,   0,   "Id of the person which is accompanied by the robot", 3,  1,  10000)
gen.add("id_person_companion", int_t,   0,   "Id of the person which is accompanied by the robot", 1,  1,  10000)
gen.add("person_goal_id", int_t,   0,   "Is the id of the person that is the actual goal for the group", 2,      1,  10000)
gen.add("move_base",        bool_t,    0,   "disabled filters cmd_vel and sends zeros", True)
gen.add("plan_mode",        int_t,     0,   "#0-F_RRT_Uniform, #1-F_RRT_Gauss_Circle, #2-F_RRT_Gauss_Circle_alpha",  1,      0,  2)
gen.add("distance_mode",    int_t,     0,   "#0-Euclidean, #1-cost-to-go-erf, #2-c2g-norm, #3-c2g-raw. It is recomnded not to use *erf/*norm methods and not using also *erf/*norm in the global mode, except for c2g-raw",      1,      0,  3)
gen.add("global_mode",      int_t,     0,   "Designed to be paired with the distance_mode, although it may use a different global mode:#0-Scaliarization, #1-Weighted-sum-erf, #2-Weighted-sum-norm, #3-MO_erf, #4-MO_norm",      1,      0,  4)
gen.add("vis_mode",         int_t,    0,   "Visualization markers: #0 no markers, #1 min, #2 normal(2d), #3 super (3d), #4 SUPER!",          2,      0,  4)
gen.add("frozen_mode",      bool_t,    0,   "Visualization freezed",                             False)
gen.add("number_vertex",    int_t,     0,   "Number of total vertexes for planning purposes",  500,      1,  10000)
gen.add("horizon_time",     double_t,  0,   "Horizon time in which people are considered for planning purposes",  7.0,      0.1,  40.0)
gen.add("cost_distance", double_t,0,   "goal cost parameter, distance to goal",              1.0,      0.0,  100.0)
gen.add("cost_orientation", double_t,0, "orientation cost parameter, distance to goal",  1.0,      0.0,  100.0)
gen.add("cost_w_robot", double_t,0,       "robot cost paramters, work of the path",        1.0,      0.0,  100.0)
gen.add("cost_w_people",   double_t,0,   "interacing people cost paramters, work of the pertubations generated",1.0,      0.0,  100.0)
gen.add("cost_time", double_t,0,       "potentia time cost paramter, up to get t_horizon",        0.25,      0.0,  100.0)
gen.add("cost_obs", double_t,0,       "obstacle cost paramter",        1.0,      0.0,  100.0)
gen.add("cost_old_path", double_t,0,       "old path cost paramter",        0.0,      0.0,  100.0)
gen.add("cost_l_minima", double_t,0,       "local minima scape cost paramter",        0.0,      0.0,  100.0)
gen.add("v_max",           double_t,   0,   "robot maximum velocity",             0.7,      0.0,  5.0)
gen.add("w_max",           double_t,   0,   "robot maximum angular velocity",     0.7,      0.0,  20.0)
gen.add("av_max",          double_t,   0,   "robot maximum acceleration",         0.4,      0.0,  20.0)
gen.add("av_break",          double_t,   0,   "robot minimum acceleration (breaking)",  0.5,  0.0,  20.0)
gen.add("aw_max",          double_t,   0,   "robot maximum angular acceleration", 0.7,      0.0,  20.0)
gen.add("platform_radii", double_t,   0,   "robot radii",             0.7,      0.0,  5.0)
gen.add("xy_goal_tolerance", double_t,   0,   "robot distance to goal reached tolerance", 0.2,      0.0,  5.0)
gen.add("distance_to_stop", double_t,   0,   "distance to goal to start the soft stopping",    1.0,      0.2,  5.0)
gen.add("v_goal_tolerance", double_t,   0,   "robot velocity to goal reached tolerance", 0.1,      0.0,  0.5)
# SFM paramters for debuging
gen.add("esfm_to_person_A", double_t,   0,   "Extended social force model paramter: A", 3.0,      0.0,  30.0)
gen.add("esfm_to_person_B", double_t,   0,   "Extended social force model paramter: B", 2.64,      0.0,  5.0)
gen.add("esfm_to_person_lambda", double_t,   0,   "Extended social force model paramter: lambda", 0.5,      0.0,  1.0)
gen.add("esfm_to_robot_A", double_t,   0,   "Extended social force model paramter: A", 3.66,      0.0,  30.0)
gen.add("esfm_to_robot_B", double_t,   0,   "Extended social force model paramter: B", 2.79,      0.0,  5.0)
gen.add("esfm_to_robot_lambda",      double_t,   0,   "Extended social force model paramter: lambda", 0.1,      0.0,  1.0)
gen.add("esfm_to_obstacle_A", double_t,   0,   "Extended social force model paramter: A", 1.5,      0.0,  30.0)
gen.add("esfm_to_obstacle_B", double_t,   0,   "Extended social force model paramter: B", 0.3,      0.0,  5.0)
gen.add("esfm_to_obstacle_lambda",  double_t,   0,   "Extended social force model paramter: lambda", 1.0,      0.0,  1.0)
gen.add("esfm_k",           double_t,   0,   "Extended social force model paramter: k", 2.3,      0.0,  5.0)
gen.add("esfm_d",           double_t,   0,   "Extended social force model paramter: d", 0.2,      -2.0,  2.0)
# end of SFM params
gen.add("min_v_to_predict",    double_t,    0,   "Minimum estimaated velocity that the BHMIP requires in order to make aprediction. If velocity is lower than this number, then no prediction is done and the targets remains in place",          0.1,  0.0,  5.0)
gen.add("ppl_collision_mode",           int_t,   0,   "mode to calculate ppl collisions #0 deterministic, #1 mahalanobis to std, #2 mahalanobis to std 0.5 and Euclidean distance near, #3 Mahalanobis to std 0.3+Eucl", 0,      0,  3)
gen.add("pr_force_mode",           int_t,   0,   "probabilistic interaction robot-ppl #0 deterministic, #1 sampling, #2 mahalanobis, #3 worst distance to ellipsoid", 0,      0,  3)
gen.add("force_map_path",       str_t,   0, "path to force map file",   "")
gen.add("destination_map_path", str_t,   0, "path to force map file",   "")
gen.add("robot",                str_t,   0, "robot name",   "")
gen.add("restore_defaults",  bool_t, 0, "Restore to the default configuration", False)
gen.add("goal_providing_mode",           int_t,   0,   "mode to provide goals to the local planner: #0 cropping or intersecting the plan with the boundary of local window; #1 Slicing the plan into a set of subgoals at salient points", 1,      0,  1)
gen.add("slicing_diff_orientation",   double_t,   0,   "Slicing path changes in orientation to select a new subgoal. Only makes sense if the goal_providing_mode is set to #1", 20.0,      10.0,  90.0)
# SFM companion params
gen.add("robot_goal_force_marker"       ,   bool_t,  0, "enable visualization of robot goal force marker", True)
gen.add("robot_person_forces_marker"   ,     bool_t,  0, "enable visualization of robot person forces marker", True)
gen.add("robot_obstacles_forces_marker",     bool_t,  0, "enable visualization of robot obstacles forces marker", True)
gen.add("robot_resultant_force_marker" ,     bool_t,  0, "enable visualization of robot resultan force marker", True)
gen.add("robot_companion_force_marker" ,     bool_t,  0, "enable visualization of robot resultan force marker", True)
gen.add("debug_robot_ROS_Info",  bool_t,   0,   "mode debug, save velocities", False)
gen.add("debug_robot_cout_library",  bool_t,   0,   "mode debug, save velocities", False)
gen.add("debug_robot_file",  bool_t,   0,   "mode debug, save velocities", False)
gen.add("debug_only_robot_point_comp_person_point",  bool_t,   0,   "mode debug, save velocities", False)
# en casa: /home/erepiso ... ; en IRI: /home/ely7787 ...
gen.add("results_filename"                  , str_t,    0,  "File name for the results.", "/home/erepiso/iri-lab/labrobotica/restricted/algorithms/people_prediction/branches/ely_people_prediction_companion_robot/1_data_results/results_person_companion.txt")
gen.add("debug_filename"                  , str_t,    0,  "File name for the results.", "/home/erepiso/iri-lab/labrobotica/restricted/algorithms/people_prediction/branches/ely_people_prediction_companion_robot/1_data_results/debug_person_companion.txt")
gen.add("evaluate_costs_filename"                  , str_t,    0,  "File name for the results.", "/home/erepiso/iri-lab/labrobotica/restricted/algorithms/people_prediction/branches/ely_people_prediction_companion_robot/2_results_evaluate_costs/results_evaluate_costs_person_companion.txt")

gen.add("set_external_near_k",   double_t,   0,   "set external k force parameter for near goals", 2.3,      0.0,  15.0)




gen.add("set_external_far_k",   double_t,   0,   "set external k force parameter for near goals", 2.3,      0.0,  15.0)
gen.add("ex_max_dist_to_near_goal_force",   double_t,   0,   "set external k force parameter for near goals", 3.0,      0.0,  15.0)
gen.add("marge_in_distance", double_t,   0,   "marge in distance to follow person", 0.3,      0.0,  4.0)
gen.add("marge_angle_companion", double_t,   0,   "marge angle companion to follow person", 10,      0.0,  50.0)
gen.add("proximity_distance_between_robot_and_person", double_t,   0,   "Is the distance between robot and person", 1.5,      0.0,  5.0)
gen.add("proximity_distance_tolerance", double_t,   0,   "Is the tolerance of distance between robot and person, far(+) and near(-)", 0.25,      0.0,  4.0)
gen.add("add_dist_companion_sphere", double_t,   0,   "Is the additional distance to the distance between person and robot to obtain the full sphere arround both", 1.0,      0.0,  5.0)
gen.add("proximity_goals_robot_and_person_x", double_t,   0,   "Is the distance between the person goal and the robot goal in x (proximity_distance_between_robot_and_person/2)", 0.75,      0.0,  5.0)
gen.add("proximity_goals_robot_and_person_y", double_t,   0,   "Is the distance between the person goal and the robot goal in y (proximity_distance_between_robot_and_person/2)", 0.75,      0.0,  5.0)
gen.add("offset_attractive_state", double_t,   0,   "Is an offset far of the person to enter before in the akp planner", 1.0,      0.0,  5.0)
gen.add("force_obs_max_x", double_t,   0,   "Is the maximun repulsive force in x of the obstacles, to allow a line of obstacles without overlaps", 0.1,      0.0,  5.0)
gen.add("force_obs_max_y", double_t,   0,   "Is the maximun repulsive force in y of the obstacles, to allow a line of obstacles without overlaps", 0.1,      0.0,  5.0)
gen.add("real_companion_angle",           int_t,   0,   "Is the companion angle set for the case without obstacles", 100,      0,  180)
gen.add("person_goal_percentage",   double_t,   0,   "Is Weight in percentage for the goal near of the person (walk-side-by-side)", 0.5,      0.0,  1.0)
gen.add("external_goal",  bool_t,   0,   "Set a external goal or not", False)
gen.add("overpas_obstacles_behind_person",  bool_t,   0,   "Set if the robot overpas the obstacle behind the person", True)
gen.add("anisotropy_threshold",   double_t,   0.8,   " Is the anisotropy to take into account the visible obstacles", 0.0,      0.0,  5.0)
gen.add("detection_laser_obstacle_distances",   double_t,   0,   " distance to detect the laser obstacles (reduce the computaional time)", 5.0,      0.0,  15.0)
gen.add("in_max_asos_point_to_person",           int_t,   0,   "detector de obstaculos maximo numero de puntos associados a persona", 100,      0,  1000)
gen.add("save_results_in_file",  bool_t,   0,   "Set if we want to save_results_in_file", True)
gen.add("metros_al_goal",   double_t,   0,   " distance to goal to save results in file", 1.5,      0.0,  15.0)
gen.add("mode_velocity",  bool_t,   0,   " dos modos de velocidad a probar en reales", False)
gen.add("reduce_max_vel_sim",   double_t,   0,   "distance to near goal, to reduce the velocity", 1.0,      0.0,  15.0)
gen.add("mode_step_near",  bool_t,   0,   " dos modos de velocidad a probar en reales", False)
gen.add("out_index_step", int_t,   0,   "Id of the person which is accompanied by the robot", 4,  1,  1000)
gen.add("person_radi_amp",   double_t,   0,   "To take into account radi of person force", 0.5,      0.0,  15.0)
gen.add("obstacle_radi_amp",   double_t,   0,   "To take into account radi of obstacle force", 0.4,      0.0,  15.0)
gen.add("ini_vel_to_increment_angle",   double_t,   0,   "vel to compute increment angle in any step", 0.2,      0.0,  15.0)
# end of SFM companion params
# Ini Cscene_sim parameters
#gen.add("robot",   str_t,   0,    "robot name",   "unknown") # repetido...
gen.add("simulation_mode",       int_t,      0,                        "Person simulation mode: 0 for normal mode: constant number of persons; 1 for people density growing",    0,  0,  1)
gen.add("freeze",              bool_t,      0,                  "Freezes persons to publish the same scene over time",   False)
gen.add("remove_targets",       bool_t,      0,                           "The simulation removes tagets once they get to their first destination",   False)
gen.add("number_persons",       int_t,       0,                            "number of targets",                 10,      0,    5000)
#gen.add("force_map_path",   str_t,   0,    "path to force map file",   "") # repetida... ojo no se si habra k desdoblar.
#gen.add("destination_map_path",   str_t,   0,    "path to force map file",   "") # repetida... ojo no se si habra k desdoblar.
gen.add("person_companion_goal_force_marker"       ,   bool_t,  0, "enable visualization of robot goal force marker", True)
gen.add("person_companion_person_forces_marker"   ,     bool_t,  0, "enable visualization of robot person forces marker", True)
gen.add("person_companion_obstacles_forces_marker",     bool_t,  0, "enable visualization of robot obstacles forces marker", True)
gen.add("person_companion_resultant_force_marker" ,     bool_t,  0, "enable visualization of robot resultan force marker", True)
gen.add("person_companion_companion_force_marker" ,     bool_t,  0, "enable visualization of robot resultan force marker", True)
#gen.add("person_companion_goal_providing_mode",           int_t,   0,   "mode to provide goals to the local planner: #0 cropping or intersecting the plan with the boundary of local window; #1 Slicing the plan into a set of subgoals at salient points", 0,      0,  1)
#gen.add("person_companion_slicing_diff_orientation",   double_t,   0,   "Slicing path changes in orientation to select a new subgoal. Only makes sense if the goal_providing_mode is set to #1", 20.0,      10.0,  90.0)
#gen.add("vis_mode2",         int_t,    0,   "Visualization markers: #0 no markers, #1 min, #2 normal(2d), #3 super (3d)",          2,      0,  3)
gen.add("ini_theta_companion_person", double_t,   0,   "initial person companion orientation in simulation", -1.57,      -6.28,  6.28)

# Fin Cscene_sim parameters
exit(gen.generate(PACKAGE, "AkpLocalPlannerAlgorithm", "AkpLocalPlanner"))
