#! /usr/bin/env python
#*  All rights reserved.
#*
#*  Redistribution and use in source and binary forms, with or without
#*  modification, are permitted provided that the following conditions
#*  are met:
#*
#*   * Redistributions of source code must retain the above copyright
#*     notice, this list of conditions and the following disclaimer.
#*   * Redistributions in binary form must reproduce the above
#*     copyright notice, this list of conditions and the following
#*     disclaimer in the documentation and/or other materials provided
#*     with the distribution.
#*   * Neither the name of the Willow Garage nor the names of its
#*     contributors may be used to endorse or promote products derived
#*     from this software without specific prior written permission.
#*
#*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#*  POSSIBILITY OF SUCH DAMAGE.
#***********************************************************

# Author: 

PACKAGE='iri_atr_akp_local_planner_companion'

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("publish_goal"   ,   bool_t,  0, "if True => publica goal", False)
gen.add("publish_goal_x", double_t, 0, " X goal publish to restart node", 0.0 , 0.0, 1000.0)
gen.add("publish_goal_y", double_t, 0, " Y goal publish to restart node", 0.0 , 0.0, 1000.0)

# to restart the txt with real data.
gen.add("restart_real_data_txt"   ,   bool_t,  0, "if True => restart exp=1 iter=1.", False)
#  save parameters of (now are the results parameters for the quantitative study)(before debug) in file
gen.add("conf_save_in_file_Zanlungo"   ,   bool_t,  0, "if True => use zanlungo propagation.", True)
# change results file name. To save the real and simulated results.
gen.add("results_filename_Zanlungo" , str_t,    0,  "File name for the results.", "/home/erepiso/iri-lab/iri_ws/src/iri_navigation/iri_atr_akp_local_planner_companion/txt_data/results_Vform_companion.txt")

# if false in simulation, if true is real. In real, change the position of the final goal to be in line with the robot and near the goal do not interfer with the people path.
gen.add("actual_case_sim_goal"       ,   bool_t,  0, "FALSE FOR REAL; True for simulation", True)



gen.add("change_sim"       ,   bool_t,  0, "FALSE FOR REAL; True for simulation", False)
gen.add("speed_k", double_t, 0, " constant multiplying output linear speed", 1.0 , 1.0, 2.0)

# to do not move initially the robot
#gen.add("in_Zanlungo_model2"   ,   bool_t,  0, "if True => in_Zanlungo_model2 (only atractive goal to dest if people stop far from 3m of the robot", True)

gen.add("select_closest_person_as_companion"   ,   bool_t,  0, "if True => select the closest person as person companion", False)




# habilitate the FAKE person if needed
gen.add("conf_remove_second_person_comp_test_fake"   ,   bool_t,  0, "if True => send velocity 0 to de robot.", False)


# stop and restart the robot.
gen.add("stop_robot_ATR"   ,   bool_t,  0, "if True => send velocity 0 to de robot.", False)
gen.add("restart_robot_ATR"   ,   bool_t,  0, "if True => restart all, put to false the stop_robot_ATR.", True)





# id's people companions and number of these
gen.add("id_person_companion", int_t,   0,   "Id of the person which is accompanied by the robot", 1,  1,  10000000)
gen.add("id_SECOND_person_companion", int_t,   0,   "Id of the SECOND person which is accompanied by the robot", 3,  1,  10000000)
gen.add("number_of_people_in_group", int_t,   0,   "number of people inside the group that accompanies the robot", 2,  1,  10000000)

# visualization markers
gen.add("vis_mode",         int_t,    0,   "Visualization markers: #0 no markers, #1 min, #2 normal(2d), #3 super (3d), #4 SUPER!",          2,      0,  4)


# change K constant of force to final_goal
gen.add("in_K",   double_t,   0,   "change the K of force to goal", 1.52,      0.0,  180.0) # 128.7
# constants to multiply the forces.
gen.add("conf_constante_multiplicar_fuerza_base_Zanlungo", double_t, 0, " increment small Zanlungo's force.", 1.0 , 0.0, 30.0)
gen.add("betha_companion", double_t, 0, " change betha_companion to learn parameters", 0.5 , 0.0, 1.0)
gen.add("set_gamma_companion", double_t, 0, " set_gamma_companion", 1.0 , 0.0, 30.0)
gen.add("set_delta_companion", double_t, 0, " set_gamma_companion", 0.5 , 0.0, 30.0)

# habilitate Zanlungo Model (change from side-by-side to V formation
gen.add("true_ZanlungoCompModel",      bool_t,    0,   " If True acts the Zanlungo Model if False acts my companion model",   True)

# parameters model side-by-side
# proximity distance between people and robot
gen.add("proximity_distance_between_robot_and_person", double_t,   0,   "Is the distance between robot and person", 1.5,      0.0,  5.0)
#  angle of companion
gen.add("real_companion_angle",   double_t,   0,   "Is the companion angle set for the case without obstacles", 120,      0.0,  180.0) # 128.7
# Threshold distance between steps to adapts to person velocity
gen.add("change_treshold_distance_between_steps",   double_t,   0,   "change the value of the threshold of the distance between steps to use directly the person velocity",   0.1,      0.0,  40.0)

# distance from real person goal to the dynamic goal in Vform to take into account the orientation of the people to arribe to the final goal.
gen.add("distance_to_dynamic_goal_Vform",          double_t,   0,   " distancia del goal real de la persona al dynamic goal. para que no choque en paredes, pero siga orientacion personas", 3.0,      0.0,  20.0)
# distance between robot and first person companion to stop the robot in the same place, when companion people stop.
gen.add("distance_to_first_person_comp_to_stop",          double_t,   0,   " distancia entre robot y la primera persona que acompana. para pararse en el sitio cuando las personas se paran", 1.5,      0.0,  20.0)
#  circle arround the robot to detect dynamic obstacles (other people, not companions).
gen.add("radi_to_detect_other_people_no_companions",          double_t,   0,   " distancia entre robot y la primera persona que acompana. para pararse en el sitio cuando las personas se paran", 10,      0.0,  50.0)
#  circle arround the robot to detect static obstacles.
gen.add("detection_laser_obstacle_distances",   double_t,   0,   " distance to detect the laser obstacles (reduce the computaional time)", 3.0,      0.0,  20.0)


#  circle arround the robot to detect static obstacles.
gen.add("conf_dist_betw_rob_and_comp_people_to_slow_velocity",   double_t,   0,   " distancia entre robot y personas que acompana para reducir velocidad robot y que vaya mejor la Vform", 4.0,      0.0,  20.0)




# parameters for the Zanlungo Model
gen.add("in_Cr",   double_t,   0,   "value for the genome of Zanlungo Model parameter Cr",   0.62,     0.0,  15.0)
gen.add("in_r0",   double_t,   0,   "value for the genome of Zanlungo Model parameter r0",   1.5,      0.0,  15.0)
gen.add("in_Ct",   double_t,   0,   "value for the genome of Zanlungo Model parameter Ct",   0.08,     0.0,  15.0)
gen.add("in_eta",  double_t,   0,   "value for the genome of Zanlungo Model parameter eta",  -0.43,    -15.0,  15.0)
gen.add("in_rmax", double_t,   0,   "value for the genome of Zanlungo Model parameter rmax", 3.0,      0.0,  15.0)
gen.add("in_S0",   double_t,   0,   "value for the genome of Zanlungo Model parameter S0",   0.5,      0.0,  15.0) 

#  set max velocities and accelerations for propagate the robot position
gen.add("v_max",           double_t,   0,   "robot maximum velocity",             0.6,      0.0,  5.0)
gen.add("w_max",           double_t,   0,   "robot maximum angular velocity",     0.7,      0.0,  20.0)
gen.add("av_max",          double_t,   0,   "robot maximum acceleration",         0.35,      0.0,  20.0)
gen.add("av_break",          double_t,   0,   "robot minimum acceleration (breaking)",  0.5,  0.0,  20.0)
gen.add("aw_max",          double_t,   0,   "robot maximum angular acceleration", 0.3,      0.0,  20.0)

# change the k value in all entities, the robot, the person, person_companion and obst.
gen.add("in_change_k_robot"   ,   bool_t,  0, "if True => in_change_k_robot", True)
gen.add("in_change_k_person"   ,   bool_t,  0, "if True => in_change_k_person.", False)
gen.add("in_change_k_person_comp"   ,   bool_t,  0, "if True => in_change_k_person_comp.", False)
gen.add("in_change_k_obst"   ,   bool_t,  0, "if True => in_change_k_obst.", False)
# TODO: set no change id's pasarlo abajo cuando pueda. (NO CHANGE ID's! Introduce more error, at least in ATR system.
gen.add("conf_set_No_change_ids"   ,   bool_t,  0, "if True => set_No_change_ids.", True)
gen.add("conf_fake_change_ids_and_desapear"   ,   bool_t,  0, "if True => set_No_change_ids.", False)

gen.add("set_initial_v_robot_needed_for_odom", double_t, 0, " set_initial_v_robot_needed_for_odom", 0.17 , 0.0, 30.0)
gen.add("set_aument_initial_V_for_odom"   ,   bool_t,  0, "if True => set_aument_initial_V_for_odom.", False)

gen.add("conf_ideal_max_robot_velocity", double_t,   0,   "Is the maximum velocity of the robot for this system", 0.9,      0.0,  3.0)




gen.add("conf_initial_limit_distance_goal_to_person_robot_stop", double_t,   0,   "limit in distance between goal_person and person to stop robot", 0.3,      0.0,  3.0)

gen.add("in_minimun_velocity_case_stop_initial", double_t,   0,   "Is minimun velocity to change the goal of the robot to do not it first position", 0.15,      0.0,  4.0)




gen.add("proximity_distance_tolerance", double_t,   0,   "Is the tolerance of distance between robot and person, far(+) and near(-)", 0.25,      0.0,  4.0)




# parameters to calculate the desired vel of Zanlungo
gen.add("bool_calculated_desired_vel"   ,   bool_t,  0, "if True => calculate goal desired vel with Zanlungo.", True)
gen.add("in_max_vel_desired_zanlungo",   double_t,   0,   "The maximun desired velocity (final goal) to use in the Zanlungo model", 0.9,      0.0,  180.0) # 128.7
gen.add("in_desired_vel_seteada_desde_fuera",   double_t,   0,   "The actua desired velocity (for final goal) set from outside when bool_calculated_desired_vel=false Zanlungo.", 1.0,      0.0,  180.0) # 128.7

gen.add("in_AKP_C1",   double_t,   0,   "change in_AKP_C1", 0.08,      0.0,  180.0) # 128.7
gen.add("in_AKP_C_vp_desired_Zanlungo",   double_t,   0,   "change in_AKP_C_vp_desired_Zanlungo", 1.336,      0.0,  180.0) # 128.7
gen.add("in_AKP_dist_r0_Zanlungo",   double_t,   0,   "change in_AKP_dist_r0_Zanlungo", 0.75,      0.0,  180.0) # 128.7
gen.add("in_AKP_C_acc1",   double_t,   0,   "change in_AKP_C_acc1", 16.0,      0.0,  180.0) # 128.7
gen.add("in_AKP_C_acc2",   double_t,   0,   "change in_AKP_C_acc2", 3.0,      0.0,  180.0) # 128.7
gen.add("set_bool_show_constants_desired_vel"   ,   bool_t,  0, "if True => bool_show_constants_desired_vel.", False)









#  change dist_tol of Companion Zanlungo force to put 0, the component of the perpendicular force, no/reduce oscilarions
gen.add("conf_dis_tol",   double_t,   0,   "Is the companion angle set for the case without obstacles", 0.3,      0.0,  5.0) # 128.7
gen.add("conf_dis_tol_side",   double_t,   0,   "Is the companion angle set for the case without obstacles", 0.3,      0.0,  5.0) # 128.7

#  change time vindow to calculate the people velocity (propagations)
gen.add("change_time_window_filter_vel_people",   double_t,   0,   "change the value of the time window for filter the medium velocity of the prediction of people",   4.0,      0.1,  40.0)



#  to use Zanlungo propagation or my propagation
gen.add("conf_bool_robot_propagation_Zanlungo"   ,   bool_t,  0, "if True => use zanlungo propagation.", True)
#  output screen mesages of zanlungo model (debug)
gen.add("debug_output_screen_mesages_zanlungo"   ,   bool_t,  0, "if True => use zanlungo propagation.", False)

# SFM paramters for debuging
gen.add("esfm_to_person_A", double_t,   0,   "Extended social force model paramter: A", 3.0,      0.0,  30.0)
gen.add("esfm_to_person_B", double_t,   0,   "Extended social force model paramter: B", 2.64,      0.0,  5.0)
gen.add("esfm_to_person_lambda", double_t,   0,   "Extended social force model paramter: lambda", 0.5,      0.0,  1.0)
gen.add("esfm_to_robot_A", double_t,   0,   "Extended social force model paramter: A", 3.66,      0.0,  30.0)
gen.add("esfm_to_robot_B", double_t,   0,   "Extended social force model paramter: B", 2.79,      0.0,  5.0)
gen.add("esfm_to_robot_lambda",      double_t,   0,   "Extended social force model paramter: lambda", 0.1,      0.0,  1.0)
gen.add("esfm_to_obstacle_A", double_t,   0,   "Extended social force model paramter: A", 1.5,      0.0,  30.0)
gen.add("esfm_to_obstacle_B", double_t,   0,   "Extended social force model paramter: B", 0.3,      0.0,  5.0)
gen.add("esfm_to_obstacle_lambda",  double_t,   0,   "Extended social force model paramter: lambda", 1.0,      0.0,  1.0)
gen.add("esfm_k",           double_t,   0,   "Extended social force model paramter: k", 2.3,      0.0,  5.0)
gen.add("esfm_d",           double_t,   0,   "Extended social force model paramter: d", 0.2,      -2.0,  2.0)



#  the dt between iterations of the planner.
gen.add("set_planner_dt", double_t, 0, " planner dt_", 0.2 , 0.0, 30.0)
# parameters for the Zanlungo Model ATR dt_=0.2 ;   akp_planner dt_=0.2




gen.add("conf_in_up_distance_margin_Zamlungo", double_t, 0, " planner dt_(ZANLUNGO, deprecated)", 1.5 , 0.0, 30.0)
gen.add("conf_in_down_distance_margin_Zamlungo", double_t, 0, " planner dt_(ZANLUNGO, deprecated)", 0.75 , 0.0, 30.0)
gen.add("conf_normal_vel_dampening_parameter",   double_t,   0,   "to change the normal velocity dampening parameter of the robot, aboid S behaviour",   1.6,  -15.0,  15.0)




# parameters for the Zanlungo Model for conf_high_vel_dampening_parameter=5.7; conf_normal_vel_dampening_parameter=6.3=conf_slow_vel_dampening_parameter
# parameters for my Model for conf_high_vel_dampening_parameter=1.5; conf_normal_vel_dampening_parameter=1.6=conf_slow_vel_dampening_parameter 
# finally, I returned to use the conf_normal_vel_dampening_parameter only! and seted as normal case: 1.6

gen.add("results_filename"                  , str_t,    0,  "File name for the results.", "/home/ely7787/iri-lab/labrobotica/restricted/algorithms/people_prediction/branches/ely_people_prediction_companion_robot/1_data_results/robot_results.txt")
gen.add("restart_real"   ,   bool_t,  0, "if True => restart exp_case real robot.", False)

gen.add("change_external_to_stop_case"   ,   bool_t,  0, "if True => change to case stop, else other cases by default", False)





gen.add("change_threshold_max_total_force",   double_t,   0,   "change the value of the threshold for the force to use the exat velocity until the next step or the person velocity",   0.2,      0.0,  40.0)




gen.add("change_threshold_vel_pers_to_stop",   double_t,   0,   "change the value of the threshold in velocity of the person to stop",   0.1,      0.1,  40.0)
gen.add("change_dist_bet_rob_ext_goal_to_stop",   double_t,   0,   "change the value of the distance between robot and the external goal to stop",   1.5,      0.1,  40.0)

gen.add("change_dist_bet_pers1Com_ext_goal_to_stop",   double_t,   0,   "change the value of the threshold in distance between the person1 and its goal to condition of stop the robot",   0.1,      0.1,  40.0)
gen.add("change_dist_bet_pers2Com_ext_goal_to_stop",   double_t,   0,   "change the value of the threshold in distance between the person2 and its goal to condition of stop the robotp",   0.1,      0.1,  40.0)





gen.add("platform_radii", double_t,   0,   "robot radii",             0.5,      0.0,  5.0)
gen.add("xy_goal_tolerance", double_t,   0,   "robot distance to goal reached tolerance", 0.2,      0.0,  5.0)
gen.add("distance_to_stop", double_t,   0,   "distance to goal to start the soft stopping",    2.0,      0.2,  5.0)
gen.add("v_goal_tolerance", double_t,   0,   "robot velocity to goal reached tolerance", 0.1,      0.0,  0.5)
gen.add("in_change_goal_of_the_error", int_t,   0,   "in change mode to calc final goal with we have collisions with this goal", 2,  1,  10000)

gen.add("change_sim_target_per"       ,   bool_t,  0, "FALSE FOR REAL; True for simulation", False)
######

gen.add("move_base",        bool_t,    0,   "disabled filters cmd_vel and sends zeros", True)
gen.add("plan_mode",        int_t,     0,   "#0-F_RRT_Uniform, #1-F_RRT_Gauss_Circle, #2-F_RRT_Gauss_Circle_alpha",  1,      0,  2)
gen.add("distance_mode",    int_t,     0,   "#0-Euclidean, #1-cost-to-go-erf, #2-c2g-norm, #3-c2g-raw. It is recomnded not to use *erf/*norm methods and not using also *erf/*norm in the global mode, except for c2g-raw",      1,      0,  3)
gen.add("global_mode",      int_t,     0,   "Designed to be paired with the distance_mode, although it may use a different global mode:#0-Scaliarization, #1-Weighted-sum-erf, #2-Weighted-sum-norm, #3-MO_erf, #4-MO_norm",      1,      0,  4)
gen.add("frozen_mode",      bool_t,    0,   "Visualization freezed",                             False)
gen.add("number_vertex",    int_t,     0,   "Number of total vertexes for planning purposes",  600,      1,  10000)
gen.add("horizon_time",     double_t,  0,   "Horizon time in which people are considered for planning purposes",  6.0,      0.1,  40.0)
gen.add("cost_distance", double_t,0,   "goal cost parameter, distance to goal",              1.0,      0.0,  100.0)
gen.add("cost_orientation", double_t,0, "orientation cost parameter, distance to goal",  1.0,      0.0,  100.0)
gen.add("cost_w_robot", double_t,0,       "robot cost paramters, work of the path",        1.0,      0.0,  100.0)
gen.add("cost_w_people",   double_t,0,   "interacing people cost paramters, work of the pertubations generated",1.0,      0.0,  100.0)
gen.add("cost_time", double_t,0,       "potentia time cost paramter, up to get t_horizon",        0.25,      0.0,  100.0)
gen.add("cost_obs", double_t,0,       "obstacle cost paramter",        1.0,      0.0,  100.0)
gen.add("cost_old_path", double_t,0,       "old path cost paramter",        0.0,      0.0,  100.0)
gen.add("cost_l_minima", double_t,0,       "local minima scape cost paramter",        0.0,      0.0,  100.0)


# end of SFM params
gen.add("min_v_to_predict",    double_t,    0,   "Minimum estimaated velocity that the BHMIP requires in order to make aprediction. If velocity is lower than this number, then no prediction is done and the targets remains in place",          0.2,  0.0,  5.0)
gen.add("ppl_collision_mode",           int_t,   0,   "mode to calculate ppl collisions #0 deterministic, #1 mahalanobis to std, #2 mahalanobis to std 0.5 and Euclidean distance near, #3 Mahalanobis to std 0.3+Eucl", 0,      0,  3)
gen.add("pr_force_mode",           int_t,   0,   "probabilistic interaction robot-ppl #0 deterministic, #1 sampling, #2 mahalanobis, #3 worst distance to ellipsoid", 0,      0,  3)
gen.add("force_map_path",       str_t,   0, "path to force map file",   "")
gen.add("destination_map_path", str_t,   0, "path to force map file",   "")
gen.add("robot",                str_t,   0, "robot name",   "")
gen.add("restore_defaults",  bool_t, 0, "Restore to the default configuration", False)
gen.add("goal_providing_mode",           int_t,   0,   "mode to provide goals to the local planner: #0 cropping or intersecting the plan with the boundary of local window; #1 Slicing the plan into a set of subgoals at salient points", 0,      0,  1)
gen.add("slicing_diff_orientation",   double_t,   0,   "Slicing path changes in orientation to select a new subgoal. Only makes sense if the goal_providing_mode is set to #1", 20.0,      10.0,  90.0)
# SFM companion params
gen.add("robot_goal_force_marker"       ,   bool_t,  0, "enable visualization of robot goal force marker", True)
gen.add("robot_person_forces_marker"   ,     bool_t,  0, "enable visualization of robot person forces marker", True)
gen.add("robot_obstacles_forces_marker",     bool_t,  0, "enable visualization of robot obstacles forces marker", True)
gen.add("robot_resultant_force_marker" ,     bool_t,  0, "enable visualization of robot resultan force marker", True)
gen.add("robot_companion_force_marker" ,     bool_t,  0, "enable visualization of robot resultan force marker", True)
gen.add("debug_robot_ROS_Info",  bool_t,   0,   "mode debug, save velocities", False)
gen.add("debug_robot_cout_library",  bool_t,   0,   "mode debug, save velocities", False)
gen.add("debug_robot_file",  bool_t,   0,   "mode debug, save velocities", False)
gen.add("debug_only_robot_point_comp_person_point",  bool_t,   0,   "mode debug, save velocities", False)
# en casa: /home/erepiso ... ; en IRI: /home/ely7787 ...

gen.add("debug_filename"                  , str_t,    0,  "File name for the results.", "/home/erepiso/iri-lab/labrobotica/restricted/algorithms/people_prediction/branches/ely_people_prediction_companion_robot/1_data_results/debug_robot.txt")
gen.add("evaluate_costs_filename"                  , str_t,    0,  "File name for the results.", "/home/ely7787/iri-lab/labrobotica/restricted/algorithms/people_prediction/branches/ely_people_prediction_companion_robot/2_results_evaluate_costs/results_evaluate_costs_robot.txt")
gen.add("evaluate_change_distance_and_angle_companion_filename" , str_t,    0,  "File name for the results.", "/home/ely7787/iri-lab/labrobotica/restricted/algorithms/people_prediction/branches/ely_people_prediction_companion_robot/2_results_evaluate_costs/results_evaluate_distance_and_angle_companion_robot.txt")





gen.add("set_external_near_k",   double_t,   0,   "set external k force parameter for near goals", 2.3,      0.0,  15.0)
#gen.add("set_new_A_force_face_person",   double_t,   0,   "set new_A_force_face_person", 5.05,      0.0,  15.0)
#gen.add("set_new_B_force_face_person",   double_t,   0,   "set new_B_force_face_person", 0.60,      0.0,  15.0)
gen.add("set_external_far_k",   double_t,   0,   "set external k force parameter for near goals", 2.3,      0.0,  15.0)
gen.add("ex_max_dist_to_near_goal_force",   double_t,   0,   "set external k force parameter for near goals", 3.5,      0.0,  15.0)
gen.add("marge_in_distance", double_t,   0,   "marge in distance to follow person", 0.3,      0.0,  4.0)
gen.add("marge_angle_companion", double_t,   0,   "marge angle companion to follow person", 10,      0.0,  50.0)

gen.add("add_dist_companion_sphere", double_t,   0,   "Is the additional distance to the distance between person and robot to obtain the full sphere arround both", 1.0,      0.0,  5.0)
gen.add("proximity_goals_robot_and_person_x", double_t,   0,   "Is the distance between the person goal and the robot goal in x (proximity_distance_between_robot_and_person/2)", 0.75,      0.0,  5.0)
gen.add("proximity_goals_robot_and_person_y", double_t,   0,   "Is the distance between the person goal and the robot goal in y (proximity_distance_between_robot_and_person/2)", 0.75,      0.0,  5.0)
gen.add("offset_attractive_state", double_t,   0,   "Is an offset far of the person to enter before in the akp planner", 5.0,      0.0,  5.0)
gen.add("force_obs_max_x", double_t,   0,   "Is the maximun repulsive force in x of the obstacles, to allow a line of obstacles without overlaps", 0.1,      0.0,  5.0)
gen.add("force_obs_max_y", double_t,   0,   "Is the maximun repulsive force in y of the obstacles, to allow a line of obstacles without overlaps", 0.1,      0.0,  5.0)


gen.add("person_goal_percentage",   double_t,   0,   "Is Weight in percentage for the goal near of the person (walk-side-by-side)", 0.5,      0.0,  1.0)
gen.add("external_goal",  bool_t,   0,   "Set a external goal or not", False)
gen.add("overpas_obstacles_behind_person",  bool_t,   0,   "Set if the robot overpas the obstacle behind the person", True)
gen.add("anisotropy_threshold",   double_t,   0,   " Is the anisotropy to take into account the visible obstacles", 0.2,      0.0,  1.0)

gen.add("in_max_asos_point_to_person",           int_t,   0,   "detector de obstaculos maximo numero de puntos associados a persona", 100,      0,  1000)
gen.add("save_results_in_file",  bool_t,   0,   "Set if we want to save_results_in_file", True)
gen.add("metros_al_goal",   double_t,   0,   " distance to goal to save results in file", 3.0,      0.0,  15.0)
gen.add("mode_velocity",  bool_t,   0,   " dos modos de velocidad a probar en reales", False)
gen.add("reduce_max_vel_sim",   double_t,   0,   "distance to near goal, to reduce the velocity", 1.0,      0.0,  15.0)
gen.add("mode_step_near",  bool_t,   0,   " dos modos de velocidad a probar en reales", False)

#gen.add("out_index_step", int_t,   0,   "Id of the person which is accompanied by the robot", 4,  1,  1000)
gen.add("out_index_step_companion_goal", int_t,   0,   "Id of the person which is accompanied by the robot", 4,  1,  1000)
gen.add("out_index_stepfinal_dest_goal", int_t,   0,   "Id of the person which is accompanied by the robot", 10,  1,  1000)

gen.add("person_radi_amp",   double_t,   0,   "To take into account radi of person force", 0.5,      0.0,  15.0)
gen.add("obstacle_radi_amp",   double_t,   0,   "To take into account radi of obstacle force", 0.4,      0.0,  15.0)
gen.add("ini_vel_to_increment_angle",   double_t,   0,   "vel to compute increment angle in any step", 0.4,      0.0,  15.0)

# wii and Ps3 comandaments parameters. // seguramente se cambiaran por los que necesite yo.

gen.add("use_default_wii_button",  bool_t,   0,   " False to set out wii Up and down buttons", True)
gen.add("use_default_PS3_button",  bool_t,   0,   " False to set out PS3 Up and down buttons", True)
gen.add("PS3_Up_button", int_t,   0,   "The id of the Up button used in the PS3 comandament", 4,  0,  20)
gen.add("PS3_Down_button", int_t,  0,   "The id of the Down button used in the PS3 comandament", 6,  0,  20)
gen.add("Wii_Up_button", int_t,   0,   "The id of the Up button used in the wii comandament", 4,  0,  15)
gen.add("Wii_Down_button", int_t,   0,   "The id of the Down button used in the wii comandament", 5,  0,  15)
gen.add("joy_watchdog_time",          double_t, 0, "Maximum time (seconds) between joy msgs",                 1.0, 0.1, 3.0)
gen.add("translation_increment_step", double_t, 0, "Translational platform velocity increment step in [m/s]", 0.1, 0.0, 0.2)
gen.add("rotation_increment_step",    double_t, 0, "Rotational platform velocity increment step in [rad/s]",  0.1, 0.0, 0.2)

gen.add("max_translation_speed",      double_t, 0, "Maximum translational speed in [m/s]",                    0.5, 0.0, 1.5)
gen.add("max_rotation_speed",         double_t, 0, "Maximum rotational speed in [rad/s]",                     0.5, 0.0, 1.5)
gen.add("cancel_goal",                bool_t,   0,"Cancel navigation goal when teleoperating ",              False)

gen.add("conf_bool_distance_margin"   ,   bool_t,  0, "if True => set_distance_margin_of_companion_force (ZANLUNGO, deprecated).", False)
gen.add("conf_constante_multiplicar_fuerza_goal", double_t, 0, " to decrement the goal force to count the same as the Zanlungo's force.(ZANLUNGO, deprecated)", 0.5 , 0.0, 30.0)
gen.add("conf_high_vel_dampening_parameter",   double_t,   0,   "to change the high velocity dampening parameter of the robot, aboid S behaviour (not used at this moment)",  1.6,  -15.0,  15.0) 
gen.add("conf_slow_vel_dampening_parameter",   double_t,   0,   "to change the slow velocity dampening parameter of the robot, aboid S behaviour(not used at this moment)",   1.6,  -15.0,  15.0)
gen.add("conf_limit_linear_vel_for_dampening_parameter",   double_t,   0,   "to change the limit_threshold for the linear velocity to change the dampening parameter of the robot, aboid S behaviour(not used at this moment)",   0.15,  -15.0,  15.0)
gen.add("conf_limit_angular_vel_for_dampening_parameter",   double_t,   0,   "to change the limit_threshold for the angular velocity to change the dampening parameter of the robot, aboid S behaviour(not used at this moment)",   0.8,  -15.0,  15.0)
gen.add("conf_bool_group_go_to_interact_with_other_person",      bool_t,    0,   " If Fasle the group go to fix goal if true group go to meet other person(not used at this moment)",   False)

gen.add("max_dist_to_go_behind",   double_t,   0,   "is de value of max dist to goal to go behind person in FACEPERSON (this one and below not used at this moment)", 2.0,      0.0,  15.0)


#gen.add("person_goal_id", int_t,   0,   "Is the id of the person that is the actual goal for the group", 2,      1,  10000)

#gen.add("dis_COMP_and_targ_to_face_person",   double_t,   0,   "distance between person companion and target person to enter in FACEPERSON", 3,      0.0,  15.0)
#gen.add("dis_ROBOT_and_targ_to_face_person",   double_t,   0,   "distance between robot and target person to enter in FACEPERSON", 3,      0.0,  15.0)

gen.add("constant_time_steps"       ,   bool_t,  0, "if True => increment time with constant steps. False => increment time descent gradien with lambda.", False)
#gen.add("num_max_iter_constan_time_steps", int_t,   0,   "Is the maxim number of iterations in increment of time to calculate the dynamic goal", 50,      1,  10000)

#gen.add("in_dist_facepers_between_robot_and_target_person",   double_t,   0,   "is de value of max dist to goal to go behind person in FACEPERSON", 1.5,      1.0,  15.0)
#gen.add("in_dist_facepers_between_companion_and_target_person",   double_t,   0,   "is de value of max dist to goal to go behind person in FACEPERSON", 1.0,      1.0,  15.0)
#gen.add("in_dist_facepers_between_robot_and_companion_person",   double_t,   0,   "is de value of max dist to goal to go behind person in FACEPERSON", 1.5,      1.0,  15.0)
#gen.add("lambda_descent_gradient",   double_t,   0,   "is de value of lambda for the gradient in the descent gradient methos", 1.0,      0.0,  15.0)
#gen.add("get_geometrical_time_to_meet_person"       ,   bool_t,  0, "obtain the geometrical time to meet the person without obstacles", False)
#gen.add("set_inc_dist_calculate_dyn_goal_less_comp_time",   double_t,   0,   " increment of distance to diference the final of the prediction to calculate the dyn goal in case of only prediction until the distance between target person and group", 2,      0.0,  15.0)
#gen.add("debug_inc_dist_to_dyn_goal"       ,   bool_t,  0, "to debug the before distance parameter (inc_dist_calculate_dyn_goal_less_comp_time) in case of bad dyn goal calculation", False)

#gen.add("case_stop_giro"       ,   bool_t,  0, "caso girar == True, si veo que no bien, salte", True)
#gen.add("incremento_giro_positivo",   double_t,   0,   "incremento_giro_positivo STOP TO face person", 0.1,      -15.0,  15.0)
#gen.add("incremento_giro_negativo",   double_t,   0,   "incremento_giro_negativo STOP TO face person", -0.1,      -15.0,  15.0)



### cosas que no uso del sistema V formation, implementacion ###
gen.add("bool_change_ct_and_cr_with_vel",   bool_t,  0, "if True => change_ct_and_cr_with_vel.", False)
gen.add("bool_new_velocity_system",   bool_t,  0, "if True => new_velocity_system.", True)
gen.add("conf_bool_use_fake_person",   bool_t,  0, "if True => new_velocity_system.", False)
gen.add("x_velodine", double_t,   0,   "For ATR x_velodine diference respect robot centre", 0.0,      -3.0,  3.0)
gen.add("y_velodine", double_t,   0,   "For ATR y_velodine diference respect robot centre", 0.0,      -3.0,  3.0)

# TODO: quitar del todo del codigo para que no introduzca error si aumento la velocidad por encima de 0.9
gen.add("conf_final_max_v", double_t,   0,   "Is minimun velocity to change the goal of the robot to do not it first position", 0.9,      0.0,  3.0)

# TODO: quitar del todo del codigo para que no introduzca error
# INI NEW FACKE CHANGE AND DESAPEAR ID:
gen.add("conf_id_first_person_generate_facke_track_desapear", int_t,   0,   "Id of the person which is accompanied by the robot", 1,  1,  10000000)
# FIN NEW FACKE CHANGE AND DESAPEAR ID:
# INI NEW FACKE CHANGE AND DESAPEAR ID:
gen.add("conf_id_second_person_generate_facke_track_desapear", int_t,   0,   "Id of the SECOND person which is accompanied by the robot", 1000,  1,  10000000)
# FIN NEW FACKE CHANGE AND DESAPEAR ID:


# end of SFM companion params
exit(gen.generate(PACKAGE, "AkpLocalPlannerAlgorithm", "AkpLocalPlanner"))

