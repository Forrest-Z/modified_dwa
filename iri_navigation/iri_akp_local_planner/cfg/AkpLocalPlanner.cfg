#! /usr/bin/env python
#*  All rights reserved.
#*
#*  Redistribution and use in source and binary forms, with or without
#*  modification, are permitted provided that the following conditions
#*  are met:
#*
#*   * Redistributions of source code must retain the above copyright
#*     notice, this list of conditions and the following disclaimer.
#*   * Redistributions in binary form must reproduce the above
#*     copyright notice, this list of conditions and the following
#*     disclaimer in the documentation and/or other materials provided
#*     with the distribution.
#*   * Neither the name of the Willow Garage nor the names of its
#*     contributors may be used to endorse or promote products derived
#*     from this software without specific prior written permission.
#*
#*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#*  POSSIBILITY OF SUCH DAMAGE.
#***********************************************************

# Author: 

PACKAGE='iri_akp_local_planner'

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("move_base",        bool_t,    0,   "disabled filters cmd_vel and sends zeros", True)
gen.add("plan_mode",        int_t,     0,   "#0-F_RRT_Uniform, #1-F_RRT_Gauss_Circle, #2-F_RRT_Gauss_Circle_alpha",  1,      0,  2)
gen.add("distance_mode",    int_t,     0,   "#0-Euclidean, #1-cost-to-go-erf, #2-c2g-norm, #3-c2g-raw. It is recomnded not to use *erf/*norm methods and not using also *erf/*norm in the global mode, except for c2g-raw",      1,      0,  3)
gen.add("global_mode",      int_t,     0,   "Designed to be paired with the distance_mode, although it may use a different global mode:#0-Scaliarization, #1-Weighted-sum-erf, #2-Weighted-sum-norm, #3-MO_erf, #4-MO_norm",      1,      0,  4)
gen.add("vis_mode",         int_t,    0,   "Visualization markers: #0 no markers, #1 min, #2 normal(2d), #3 super (3d), #4 SUPER!",          1,      0,  4)
gen.add("frozen_mode",      bool_t,    0,   "Visualization freezed",                             False)
gen.add("number_vertex",    int_t,     0,   "Number of total vertexes for planning purposes",  1000,      1,  10000)
gen.add("horizon_time",     double_t,  0,   "Horizon time in which people are considered for planning purposes",  5.0,      0.1,  40.0)
gen.add("cost_distance", double_t,0,   "goal cost parameter, distance to goal",              1.0,      0.0,  100.0)
gen.add("cost_orientation", double_t,0, "orientation cost parameter, distance to goal",  1.0,      0.0,  100.0)
gen.add("cost_w_robot", double_t,0,       "robot cost paramters, work of the path",        1.0,      0.0,  100.0)
gen.add("cost_w_people",   double_t,0,   "interacing people cost paramters, work of the pertubations generated",1.0,      0.0,  100.0)
gen.add("cost_time", double_t,0,       "potentia time cost paramter, up to get t_horizon",        0.25,      0.0,  100.0)
gen.add("cost_obs", double_t,0,       "obstacle cost paramter",        1.0,      0.0,  100.0)
gen.add("cost_old_path", double_t,0,       "old path cost paramter",        0.0,      0.0,  100.0)
gen.add("cost_l_minima", double_t,0,       "local minima scape cost paramter",        0.0,      0.0,  100.0)
gen.add("v_max",           double_t,   0,   "robot maximum velocity",             1.0,      0.0,  5.0)
gen.add("w_max",           double_t,   0,   "robot maximum angular velocity",     1.57,      0.0,  20.0)
gen.add("av_max",          double_t,   0,   "robot maximum acceleration",         2.0,      0.0,  20.0)
gen.add("av_break",          double_t,   0,   "robot minimum acceleration (breaking)",  4.0,  0.0,  20.0)
gen.add("aw_max",          double_t,   0,   "robot maximum angular acceleration", 1.0,      0.0,  20.0)
gen.add("platform_radii", double_t,   0,   "robot radii",             0.3,      0.0,  5.0)
gen.add("xy_goal_tolerance", double_t,   0,   "robot distance to goal reached tolerance", 0.2,      0.0,  5.0)
gen.add("distance_to_stop", double_t,   0,   "distance to goal to start the soft stopping",    1.0,      0.2,  5.0)
gen.add("v_goal_tolerance", double_t,   0,   "robot velocity to goal reached tolerance", 0.1,      0.0,  0.5)
# SFM paramters for debuging
gen.add("esfm_to_person_A", double_t,   0,   "Extended social force model paramter: A", 3.0,      0.0,  30.0)
gen.add("esfm_to_person_B", double_t,   0,   "Extended social force model paramter: B", 2.64,      0.0,  5.0)
gen.add("esfm_to_person_lambda", double_t,   0,   "Extended social force model paramter: lambda", 0.5,      0.0,  1.0)
gen.add("esfm_to_robot_A", double_t,   0,   "Extended social force model paramter: A", 3.66,      0.0,  30.0)
gen.add("esfm_to_robot_B", double_t,   0,   "Extended social force model paramter: B", 2.79,      0.0,  5.0)
gen.add("esfm_to_robot_lambda",      double_t,   0,   "Extended social force model paramter: lambda", 0.1,      0.0,  1.0)
gen.add("esfm_to_obstacle_A", double_t,   0,   "Extended social force model paramter: A", 3.0,      0.0,  30.0)
gen.add("esfm_to_obstacle_B", double_t,   0,   "Extended social force model paramter: B", 2.4,      0.0,  5.0)
gen.add("esfm_to_obstacle_lambda",  double_t,   0,   "Extended social force model paramter: lambda", 1.0,      0.0,  1.0)
gen.add("esfm_k",           double_t,   0,   "Extended social force model paramter: k", 2.3,      0.0,  5.0)
gen.add("esfm_d",           double_t,   0,   "Extended social force model paramter: d", 0.2,      -2.0,  2.0)
# end of SFM params
gen.add("min_v_to_predict",    double_t,    0,   "Minimum estimaated velocity that the BHMIP requires in order to make aprediction. If velocity is lower than this number, then no prediction is done and the targets remains in place",          0.1,  0.0,  5.0)
gen.add("ppl_collision_mode",           int_t,   0,   "mode to calculate ppl collisions #0 deterministic, #1 mahalanobis to std, #2 mahalanobis to std 0.5 and Euclidean distance near, #3 Mahalanobis to std 0.3+Eucl", 0,      0,  3)
gen.add("pr_force_mode",           int_t,   0,   "probabilistic interaction robot-ppl #0 deterministic, #1 sampling, #2 mahalanobis, #3 worst distance to ellipsoid", 0,      0,  3)
gen.add("force_map_path",       str_t,   0, "path to force map file",   "")
gen.add("destination_map_path", str_t,   0, "path to force map file",   "")
gen.add("robot",                str_t,   0, "robot name",   "")
gen.add("restore_defaults",  bool_t, 0, "Restore to the default configuration", False)
gen.add("goal_providing_mode",           int_t,   0,   "mode to provide goals to the local planner: #0 cropping or intersecting the plan with the boundary of local window; #1 Slicing the plan into a set of subgoals at salient points", 0,      0,  1)
gen.add("slicing_diff_orientation",   double_t,   0,   "Slicing path changes in orientation to select a new subgoal. Only makes sense if the goal_providing_mode is set to #1", 20.0,      10.0,  90.0)

exit(gen.generate(PACKAGE, "AkpLocalPlannerAlgorithm", "AkpLocalPlanner"))
